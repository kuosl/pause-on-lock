#!/usr/bin/env bash
#
# Copyright (c) 2016-2020 Thomas Goldbrunner
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
VERSION="2.1.0"
RELEASE_DATE="2020-11-10"

__is_playing() {
  dbus-send --print-reply --dest="$INTERFACE.$1" "$OBJPATH" \
    "$GET_PROPERTIES" string:"$INTERFACE.Player" string:'PlaybackStatus' 2>/dev/null | \
    grep 'Playing' &> /dev/null
}

__resume_player() {
  dbus-send --print-reply --dest="$INTERFACE.$1" "$OBJPATH" \
    "$INTERFACE.Player.Play" &> /dev/null
}

# Array of supported desktops used to specify DBUS interface
declare -A desktops=( ["Unity"]="interface='com.canonical.Unity.Session'"
                      ["GNOME"]="gnome" ["ubuntu:GNOME"]="gnome"
                      ["X-Cinnamon"]="cinnamon" ["MATE"]="mate"
                      ["KDE"]="freedesktop" ["pop:GNOME"]="gnome"
                      ["XFCE"]="xfce" )

# D-Bus interface, object path and method needed to control MPRIS players
INTERFACE="org.mpris.MediaPlayer2"
OBJPATH="/org/mpris/MediaPlayer2"
GET_PROPERTIES="org.freedesktop.DBus.Properties.Get"

# variable indicating whether to use playerctl
PLAYERCTL=true

# parse command line options
while (( "$#" )); do
  case "$1" in
    -h|--help)
      echo "Usage: \$ pause-on-lock [option]"
      echo ""
      echo "Options:"
      echo ""
      echo "    -p|--player NAME   set the player to pause on lock"
      echo "    -c|--playerctl     enable playerctl support"
      echo "    -h|--help          print this help text and exit"
      echo "    -v|--version       print version information and exit"
      echo ""
      echo "For more information visit https://github.com/folixg/pause-on-lock"
      echo ""
      exit 0
      ;;
    -v|--version)
      echo "This is pause-on-lock $VERSION (released $RELEASE_DATE)"
      exit 0
      ;;
    -p|--player)
      USER_PLAYER="$2"
      shift 2
      ;;
    -c|--playerctl)
      # check if playerctl is available on the system
      if [ ! "$(playerctl --version 2>/dev/null)" ]; then
        echo "Error: failed to execute playerctl."
        exit 1
      fi
      PLAYERCTL=true
      shift
      ;;
    *)
      echo "Error: Unknown flag $1"
      echo "Run \"pause-on-lock --help\" for help."
      exit 1
      ;;
  esac
done

if [ "${desktops[$XDG_CURRENT_DESKTOP]}" == "" ]; then
  echo "Error: Unsupported desktop. Supported desktops are Unity, GNOME, Cinnamon, Mate and KDE."
  exit 1
fi
if [ "$XDG_CURRENT_DESKTOP" == "Unity" ] ; then
  DBUS_LOCK="${desktops[$XDG_CURRENT_DESKTOP]}"
  LOCK_SIGNAL="Locked"
  UNLOCK_SIGNAL="Unlocked"
else
  DBUS_LOCK="interface='org.${desktops[$XDG_CURRENT_DESKTOP]}.ScreenSaver',member='ActiveChanged'"
  LOCK_SIGNAL="true"
  UNLOCK_SIGNAL="false"
fi

dbus-monitor --session "type='signal',$DBUS_LOCK" | \
(
  # every signal will send twice, which will make log player unexpected, use $second_run to tell them apart
  second_run=false
  while true; do
    read -r X
    # pause on lock

    # save playing player list to tmp file, for the afterwards-resume
    playing_players="/tmp/playerctl-playing-players"

    ###########  LOCK ###############
    if echo "$X" | grep -w "$LOCK_SIGNAL" &> /dev/null; then
      if ! $second_run; then
        second_run=true
        continue
      else
        second_run=false
      fi

      if [ -e $playing_players ]; then
        rm -f $playing_players
      fi

      # get list of running players
      # check whether a player is playing
      for player in $(playerctl --list-all)
      do
        if [ "$(playerctl -p $player status)" = "Playing" ] ; then
          # and pause it
          playerctl -p "$player" pause
          echo "$player" >> $playing_players
        fi
      done
    fi

    ###########  UNLOCK ###############
    if echo "$X" | grep -w "$UNLOCK_SIGNAL" &> /dev/null; then
      if ! $second_run; then
        second_run=true
        continue
      else
        second_run=false
      fi
      if [ -e $playing_players ]; then
        for player in $(cat $playing_players); do
          __resume_player "$player"
        done
      else
        players="$(playerctl --list-all)"
        # check whether a player is playing
        for player in "$players"
        do
          __resume_player "$player"
        done
      fi
    fi

  done
)
